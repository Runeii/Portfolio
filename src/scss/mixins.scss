@mixin wrapper {
  width: calc(100vw - #{vr(2)});
  @media screen and (min-width: $wrapper) {
    max-width: $wrapper;
    margin-left: auto;
    margin-right: auto;
  }
}

@mixin grid($cols: $gridColumns) {  
  // Old browsers
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  align-items: flex-start;

  display: grid;
  justify-content: initial;
  align-items: initial;
  grid-template-columns: repeat(4, 1fr);
  grid-column-gap: vr(1);
  grid-row-gap: vr(1);
  @media (min-width: $desktop) {
    grid-template-columns: repeat(12, 1fr);
  }
}
/*
* * Calculate a responsive vertical rhythm unit * *
* Allows us to adjust typography and VR by simply changing custom properties on :root
* *
*/
@function vr($multiple) {
  @return #{$baseline * $multiple};
}

@mixin target_ie11 () {
  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
    @content;
  }
}
/*
* * Generate IE10/11 compatible CSS Grid markup * *
* *
*/
@mixin grid-column($start, $end) {
  $span: $end - $start;
  width: $columnWidth * $span;
  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
    width: auto;
    -ms-grid-column: $start;
    -ms-grid-column-span: $span;
  }
  @supports (display: grid) {
    width: initial;
    grid-column: #{$start} / #{$end};
  }
}
@mixin grid-row($start, $end) {
  $span: $end - $start;
  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
    -ms-grid-row: $start;
    -ms-grid-row-span: $span;
  }
  @supports (display: grid) {
    grid-row: #{$start} / #{$end};
  }
}
